"""
M√≥dulo para gerenciar o contexto das regras do jogo e comunica√ß√£o com o or√°culo MCP.
Respons√°vel por aprender e interpretar as regras do jogo.
"""

import requests
from typing import List, Dict, Any, Optional
try:
    from config import Config
except ImportError:
    # Fallback se config n√£o estiver dispon√≠vel
    class Config:
        MCP_SERVER_URL = "http://127.0.0.1:8000"
        REQUEST_TIMEOUT = 30


class GameRulesContext:
    """Gerencia o contexto das regras do jogo obtidas do or√°culo MCP"""
    
    def __init__(self, mcp_server_url: str | None = None):
        self.mcp_server_url = mcp_server_url if mcp_server_url is not None else Config.MCP_SERVER_URL
        self.game_tools = []
        self.tools_description = ""
    
    def learn_rules(self) -> bool:
        """
        Aprende as regras do jogo consultando o or√°culo MCP.
        
        Returns:
            bool: True se conseguiu aprender as regras, False caso contr√°rio
        """
        try:
            print("üß† Consultando o or√°culo MCP para aprender as regras do jogo...")
            response = requests.get(
                f"{self.mcp_server_url}/tools",
                timeout=Config.REQUEST_TIMEOUT
            )
            response.raise_for_status()
            
            self.game_tools = response.json()
            self._build_tools_description()
            
            print(f"üìö Regras aprendidas com sucesso! {len(self.game_tools)} ferramentas dispon√≠veis.")
            return True
            
        except requests.exceptions.RequestException as e:
            print(f"‚ùå Erro ao conectar-se ao or√°culo MCP: {e}")
            print(f"   Certifique-se de que o servidor MCP est√° rodando em {self.mcp_server_url}")
            return False
        except Exception as e:
            print(f"üî• Erro inesperado ao aprender regras: {e}")
            return False
    
    def _build_tools_description(self):
        """Constr√≥i a descri√ß√£o das ferramentas dispon√≠veis"""
        descriptions = []
        for tool in self.game_tools:
            args_str = ', '.join(tool.get('args', []))
            desc = f"- `{tool['name']}({args_str})`: {tool['description']}"
            descriptions.append(desc)
        
        self.tools_description = "\n".join(descriptions)
    
    def get_strategy_prompt(self) -> str:
        """
        Gera o prompt para cria√ß√£o de estrat√©gia baseado nas regras aprendidas.
        
        Returns:
            str: Prompt formatado para o modelo de IA
        """
        return f"""
        Voc√™ √© um agente de IA especialista em programa√ß√£o e jogos. Sua tarefa √© criar uma estrat√©gia para um jogo simples.

        **Objetivo do Jogo:**
        O jogador ('P') deve coletar a recompensa ('R') em um mapa cercado por paredes ('#').

        **Regras e Ferramentas Dispon√≠veis (via API):**
        {self.tools_description}
        O mapa tem coordenadas onde (0,0) √© o canto superior esquerdo.

        **Sua Tarefa:**
        Crie uma fun√ß√£o JavaScript que receba a posi√ß√£o do jogador `playerPos` (um objeto com `x` e `y`) e a posi√ß√£o da recompensa `rewardPos` (tamb√©m com `x` e `y`) e retorne a pr√≥xima melhor dire√ß√£o para o jogador se mover.
        As dire√ß√µes de retorno poss√≠veis s√£o: "up", "down", "left", "right".

        **Requisitos da Estrat√©gia:**
        - A l√≥gica deve ser contida em uma √∫nica fun√ß√£o.
        - A fun√ß√£o deve ser eficiente e direta.
        - A estrat√©gia deve ser inteligente: mova-se na dire√ß√£o horizontal e depois na vertical (ou vice-versa) para alcan√ßar a recompensa.
        - Evite movimentos diagonais, pois n√£o s√£o permitidos.
        - Considere a dist√¢ncia Manhattan para otimizar o caminho.

        **Formato da Sa√≠da:**
        Retorne APENAS o corpo da fun√ß√£o JavaScript, sem a declara√ß√£o `function(...) {{ ... }}`.

        **Exemplo de Corpo da Fun√ß√£o de Sa√≠da:**
        ```javascript
        // Estrat√©gia otimizada: primeiro alinha horizontalmente, depois verticalmente
        if (rx < px) {{
            return "left";
        }} else if (rx > px) {{
            return "right";
        }}
        if (ry < py) {{
            return "up";
        }} else if (ry > py) {{
            return "down";
        }}
        return null; // Retorna nulo se j√° estiver na posi√ß√£o
        ```

        Agora, crie o corpo da fun√ß√£o JavaScript com base na sua an√°lise das regras do jogo.
        """
    
    def get_tools(self) -> List[Dict[str, Any]]:
        """Retorna a lista de ferramentas dispon√≠veis"""
        return self.game_tools
    
    def get_tools_description(self) -> str:
        """Retorna a descri√ß√£o formatada das ferramentas"""
        return self.tools_description