"""
Servidor MCP (Modelo) que exp√µe as regras do jogo para o agente MASP.
Este √© o "Or√°culo" que o agente consulta para aprender como jogar.
"""

from flask import Flask, jsonify
from flask_cors import CORS
import random

# Configura√ß√µes do servidor
SERVER_NAME = "Block Picker Game Rules API"
SERVER_DESCRIPTION = "API que exp√µe as regras e ferramentas do jogo Block Picker"

# Inicializa o servidor Flask
app = Flask(__name__)
CORS(app)

# Simula√ß√£o do motor do jogo
class SimpleGameEngine:
    def __init__(self):
        self.directions = ['up', 'down', 'left', 'right']
        self.player_pos = [5, 5]
        self.block_pos = [3, 3]
        self.score = 0
    
    def set_move(self, direction):
        if direction in self.directions:
            return True
        return False
    
    def get_score(self):
        return self.score
    
    def get_map(self):
        return """
        ####################
        #OOOOOOOOOOOOOOOOOO#
        #OOOOOOOOOOOOOOOOOO#
        #OOOOOOOOOOOOOOOOOO#
        #OOOOOOOOOOOOOOOOOO#
        #OOOOOOOOOOOOOOOOOO#
        #OOOOOOOOOOOOOOOOOO#
        #OOOOOOOOOOOOOOOOOO#
        #OOOOOOOOOOOOOOOOOO#
        #OOOOOOOOOOOOOOOOOO#
        ####################
        """
    
    def get_player_position(self):
        return self.player_pos
    
    def get_block_position(self):
        return self.block_pos
    
    def get_valid_directions(self):
        return self.directions

# Inicializa o motor do jogo
game_engine = SimpleGameEngine()

# Rotas da API
@app.route('/tools', methods=['GET'])
def get_tools():
    """Retorna todas as ferramentas dispon√≠veis"""
    tools = [
        {
            "name": "mover",
            "description": "Move o jogador na dire√ß√£o especificada",
            "args": ["direcao"]
        },
        {
            "name": "pontuacao",
            "description": "Retorna a pontua√ß√£o atual do jogador",
            "args": []
        },
        {
            "name": "mapa",
            "description": "Retorna o desenho do mapa atual",
            "args": []
        },
        {
            "name": "posicao_jogador",
            "description": "Retorna a posi√ß√£o atual do jogador",
            "args": []
        },
        {
            "name": "posicao_recompensa",
            "description": "Retorna a posi√ß√£o atual da recompensa",
            "args": []
        },
        {
            "name": "direcoes_validas",
            "description": "Retorna as dire√ß√µes v√°lidas para movimento",
            "args": []
        },
        {
            "name": "regras_jogo",
            "description": "Retorna as regras b√°sicas do jogo",
            "args": []
        }
    ]
    return jsonify(tools)

@app.route('/mover/<direcao>', methods=['GET'])
def mover(direcao):
    """Move o jogador na dire√ß√£o especificada"""
    if direcao in game_engine.directions:
        game_engine.set_move(direcao)
        return jsonify({"message": f"üéÆ Movendo para {direcao}"})
    else:
        valid_dirs = ", ".join(game_engine.get_valid_directions())
        return jsonify({"error": f"‚ùå Dire√ß√£o inv√°lida. Use: {valid_dirs}"}), 400

@app.route('/pontuacao', methods=['GET'])
def pontuacao():
    """Retorna a pontua√ß√£o atual do jogador"""
    return jsonify({"pontuacao": f"üèÜ Pontua√ß√£o: {game_engine.get_score()}"})

@app.route('/mapa', methods=['GET'])
def mapa():
    """Retorna o desenho do mapa atual"""
    return jsonify({"mapa": f"üó∫Ô∏è Mapa atual:\n{game_engine.get_map()}"})

@app.route('/posicao_jogador', methods=['GET'])
def posicao_jogador():
    """Retorna a posi√ß√£o atual do jogador"""
    pos = game_engine.get_player_position()
    return jsonify({"posicao": f"üë§ Posi√ß√£o do jogador: ({pos[0]}, {pos[1]})"})

@app.route('/posicao_recompensa', methods=['GET'])
def posicao_recompensa():
    """Retorna a posi√ß√£o atual da recompensa"""
    pos = game_engine.get_block_position()
    return jsonify({"posicao": f"üéØ Posi√ß√£o da recompensa: ({pos[0]}, {pos[1]})"})

@app.route('/direcoes_validas', methods=['GET'])
def direcoes_validas():
    """Retorna as dire√ß√µes v√°lidas para movimento"""
    directions = game_engine.get_valid_directions()
    return jsonify({"direcoes": f"üîÑ Dire√ß√µes v√°lidas: {', '.join(directions)}"})

@app.route('/regras_jogo', methods=['GET'])
def regras_jogo():
    """Retorna as regras b√°sicas do jogo"""
    regras = """
    üìñ REGRAS DO JOGO BLOCK PICKER:
    
    1. üéØ OBJETIVO: Coletar o m√°ximo de blocos vermelhos (R) poss√≠vel
    2. üéÆ MOVIMENTO: Use as dire√ß√µes up, down, left, right
    3. üö´ LIMITES: N√£o pode sair do tabuleiro (cercado por paredes #)
    4. üèÜ PONTUA√á√ÉO: Cada bloco coletado adiciona 1 ponto
    5. üë§ POSI√á√ÉO: O jogador √© representado por 'P' no mapa
    6. üéØ RECOMPENSA: Os blocos vermelhos s√£o representados por 'R'
    7. ‚¨ú ESPA√áOS LIVRES: Representados por 'O'
    8. üß± PAREDES: Representadas por '#'
    
    O mapa usa coordenadas onde (0,0) √© o canto superior esquerdo.
    """
    return jsonify({"regras": regras})

@app.route('/health', methods=['GET'])
def health():
    """Endpoint de sa√∫de"""
    return jsonify({"status": "healthy", "service": SERVER_NAME})

def main():
    """Fun√ß√£o principal do servidor MCP"""
    print("üöÄ Servidor MCP (Or√°culo de Regras) iniciando...")
    print(f"üì° Nome: {SERVER_NAME}")
    print(f"üìù Descri√ß√£o: {SERVER_DESCRIPTION}")
    print("üîß Ferramentas dispon√≠veis:")
    print("   üéÆ mover(direcao): Move o jogador")
    print("   üèÜ pontuacao(): Retorna a pontua√ß√£o")
    print("   üó∫Ô∏è mapa(): Mostra o mapa atual")
    print("   üë§ posicao_jogador(): Posi√ß√£o do jogador")
    print("   üéØ posicao_recompensa(): Posi√ß√£o da recompensa")
    print("   üîÑ direcoes_validas(): Lista de dire√ß√µes v√°lidas")
    print("   üìñ regras_jogo(): Regras do jogo")
    print("üõë Pressione Ctrl+C para parar.")
    
    try:
        app.run(host='127.0.0.1', port=8000, debug=False)
    except KeyboardInterrupt:
        print("\nüõë Servidor MCP interrompido pelo usu√°rio")
    except Exception as e:
        print(f"üî• Erro no servidor MCP: {e}")

if __name__ == "__main__":
    main()