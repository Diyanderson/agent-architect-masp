"""
M√≥dulo para gerar estrat√©gias de jogo usando modelos de IA.
Respons√°vel por criar e otimizar estrat√©gias baseadas nas regras aprendidas.
"""

from typing import Optional
try:
    import google.generativeai as genai
    GEMINI_AVAILABLE = True
except ImportError:
    GEMINI_AVAILABLE = False
    genai = None

try:
    from config import Config
except ImportError:
    # Fallback se config n√£o estiver dispon√≠vel
    class Config:
        GEMINI_API_KEY = ""
        MODEL_NAME = "gemini-pro"


class StrategyGenerator:
    """Gerencia a gera√ß√£o de estrat√©gias usando modelos de IA"""
    
    def __init__(self):
        if GEMINI_AVAILABLE:
            genai.configure(api_key=Config.GEMINI_API_KEY)
            self.model = genai.GenerativeModel(Config.MODEL_NAME)
        else:
            self.model = None
            print("‚ö†Ô∏è Google Gemini n√£o dispon√≠vel - usando estrat√©gia padr√£o")
    
    def generate_strategy(self, prompt: str) -> Optional[str]:
        """
        Gera uma estrat√©gia de jogo usando o modelo de IA.
        
        Args:
            prompt: Prompt detalhado para gera√ß√£o da estrat√©gia
            
        Returns:
            str: C√≥digo JavaScript da estrat√©gia gerada, ou None se falhar
        """
        try:
            print("üí° Gerando estrat√©gia com a API Gemini...")
            
            if not GEMINI_AVAILABLE or not self.model:
                print("‚ö†Ô∏è Usando estrat√©gia padr√£o (Gemini n√£o dispon√≠vel)")
                return self._get_default_strategy()
            
            response = self.model.generate_content(prompt)
            
            # Limpa a resposta para extrair apenas o c√≥digo
            js_code = self._extract_js_code(response.text)
            
            if js_code:
                print("‚ú® Estrat√©gia gerada com sucesso!")
                print(f"üìù C√≥digo gerado:\n{js_code}")
                return js_code
            else:
                print("‚ùå N√£o foi poss√≠vel extrair c√≥digo JavaScript da resposta")
                return self._get_default_strategy()
                
        except Exception as e:
            print(f"üî• Erro ao gerar estrat√©gia: {e}")
            print("üîÑ Usando estrat√©gia padr√£o como fallback")
            return self._get_default_strategy()
    
    def _get_default_strategy(self) -> str:
        """Retorna uma estrat√©gia padr√£o quando a IA n√£o est√° dispon√≠vel"""
        return """
        // Estrat√©gia padr√£o: primeiro horizontal, depois vertical
        if (rx < px) {
            return "left";
        } else if (rx > px) {
            return "right";
        }
        if (ry < py) {
            return "up";
        } else if (ry > py) {
            return "down";
        }
        return null;
        """
    
    def _extract_js_code(self, response_text: str) -> Optional[str]:
        """
        Extrai o c√≥digo JavaScript da resposta do modelo.
        
        Args:
            response_text: Texto completo da resposta
            
        Returns:
            str: C√≥digo JavaScript limpo, ou None se n√£o conseguir extrair
        """
        text = response_text.strip()
        
        # Remove blocos de c√≥digo markdown se presentes
        if text.startswith("```javascript"):
            text = text.split('\n', 1)[1]
        elif text.startswith("```js"):
            text = text.split('\n', 1)[1]
        elif text.startswith("```"):
            text = text.split('\n', 1)[1]
        
        if text.endswith("```"):
            text = text.rsplit('\n', 1)[0]
        
        # Remove linhas vazias no in√≠cio e fim
        text = text.strip()
        
        # Valida√ß√£o b√°sica: deve conter pelo menos uma dire√ß√£o
        directions = ['up', 'down', 'left', 'right']
        if not any(direction in text for direction in directions):
            print("‚ö†Ô∏è C√≥digo gerado n√£o parece conter dire√ß√µes v√°lidas")
            return None
        
        return text
    
    def validate_strategy(self, js_code: str) -> bool:
        """
        Valida se a estrat√©gia gerada √© v√°lida.
        
        Args:
            js_code: C√≥digo JavaScript da estrat√©gia
            
        Returns:
            bool: True se a estrat√©gia √© v√°lida, False caso contr√°rio
        """
        try:
            # Testa se o c√≥digo pode ser compilado
            test_function = f"""
            function testStrategy(playerPos, rewardPos) {{
                const {{ x: px, y: py }} = playerPos;
                const {{ x: rx, y: ry }} = rewardPos;
                {js_code}
            }}
            """
            
            # Tenta criar a fun√ß√£o (valida√ß√£o de sintaxe)
            exec(test_function)
            
            # Testa com valores de exemplo
            test_function = f"""
            function testStrategy(playerPos, rewardPos) {{
                const {{ x: px, y: py }} = playerPos;
                const {{ x: rx, y: ry }} = rewardPos;
                {js_code}
            }}
            testStrategy({{x: 1, y: 1}}, {{x: 2, y: 2}});
            """
            
            exec(test_function)
            print("‚úÖ Estrat√©gia validada com sucesso!")
            return True
            
        except Exception as e:
            print(f"‚ùå Estrat√©gia inv√°lida: {e}")
            return False 